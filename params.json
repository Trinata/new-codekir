{"name":"CodeKir Framework","tagline":"Remake new framework","body":"### Tentang Codekir\r\nFramework Codekir adalah salah satu contoh framework berbasis PHP yang mengadopsi alur kerja dari framework Code Igniter (CI) framework ini diinisiasi oleh Ovan Cop hingga kemudian dikembangkan secara bersama sama oleh CV. Trinata Teknologi dan CV. Bhayanaka Digital serta berkolaborasi dengan IBC Universitas Gunadarma, hingga saat ini framework codekir sudah merilis versi selanjutnya 1.1\r\n\r\n### Instalasi\r\nInstalasi Framework Codekir tidak berbeda jauh dengan Framework yang lain pada umumnya tidak diperlukan file instalasi pada framework ini yang perlu dilakukan hanyalah menempatkan framework ini pada tempat (folder) yang seharusnya yaitu di dalam document root apache (folder www maupun htdocs). berikut ini langkah - langkah yang harus dilakukan sebelum menggunakan framework codekir\r\n* Pastikan server bisa menjalankan file .htaccess karena framework ini memanfaatkan file .htaccess untuk melakukan routing sistem\r\n* Ubah konfigurasi aplikasi di file /app/config/config.php dan /admin/config/config.php sesuai dengan aplikasi yang ingin dibuat\r\n* Jika menggunakan database, sesuaikan konfigurasinya pada file /app/config/access.php serta /admin/config/config.php dengan database yang digunakan\r\n* Pastikan hak akses folder cache/, public_assets/, logs/ dan tmp/, admin/cache/, admin/logs/ bisa melakukan aksi baca, tulis, eksekusi (777)\r\n\r\n### Model-View-Control\r\nFramework ini menggunakan prinsip Model View Control (MVC) seperti pada beberapa framework lainnya. Framework ini akan menjalankan fungsi controller yang ada pada folder app/.\r\n* Controller, digunakan untuk menjalankan alur data sesuai dengan permintaan dari user, mengarahkan ke file-file yang berhubungan baik ke model maupun ke file template. File controller berada didalam folder /app/controller/ dengan ekstension .php. \r\n* View, merupakan kumpulan dari template yang digunakan oleh aplikasi, folder ini berada pada direktori /app/view/. didalam direktori view/ bisa dibuat direktori baru sesuai dengan keinginan dalam mengelompokkan file template. Framework ini menggunakan template engine Smarty untuk mengkonversi data dari PHP ke HTML\r\n* Model, merupakan interface database yang digunakan dalam aplikasi, semua transaksi yang keluar masuk di database harus melewati file ini. Kumpulan file model berada di bawah direktori /app/model/\r\n\r\n### Konfigurasi\r\nKonfigurasi front-end\r\n    \r\n    /* Konfigurasi APP */\r\n    $CONFIG['default']['app_status'] = 'Development';\r\n    $CONFIG['default']['app_debug'] = TRUE;\r\n    $CONFIG['default']['php_ext'] = '.php';\r\n    $CONFIG['default']['html_ext'] = '.html';\r\n    $CONFIG['default']['default_view'] = 'home';\r\nKonfigurasi Back-end\r\n    \r\n    /* Konfigurasi ADMIN */\r\n    $CONFIG['admin']['app_status'] = 'Development';\r\n    $CONFIG['admin']['app_debug'] = TRUE;\r\n    $CONFIG['admin']['php_ext'] = '.php';\r\n    $CONFIG['admin']['html_ext'] = '.html';\r\n    $CONFIG['admin']['default_view'] = 'home';\r\n\r\nKonfigurasi Database \r\n    \r\n    $dbConfig[0]['host'] = 'host'; \r\n    $dbConfig[0]['user'] = 'username'; \r\n    $dbConfig[0]['pass']   = 'password'; \r\n    $dbConfig[0]['name']   = 'database_name'; \r\n    $dbConfig[0]['server'] = 'mysql'; \r\n    $dbConfig[0]['prefix'] = ''; \r\n    $dbConfig[0]['preftable'] = 'ck'; \r\n\r\n### Referensi Database\r\n##### Memanggil Model\r\nJika konfigurasi database sudah sesuai dengan akun pengaturan database yang dituju maka koneksi dari class database ke database bisa dilakukan dengan cara mengaktifkan fungsi berikut ini ```$this->loadModel('namaModel');``` Fungsi diatas akan memanggil file model untuk dieksekusi, file model biasanya berisi baris query database dan secara otomatis melakukan koneksi ke database sesuai dengan konfigurasi yang sudah diatur sebelumnya. Nama model adalah nama file model yang terdapat pada direktori app/model\r\n##### Menjalankan query\r\nUntuk menjalankan query ke database bisa menggunakan fungsi berikut ini \r\n```php\r\n$this->query($query);\r\n``` \r\natau \r\n```php\r\n$this->fetch($query);\r\n``` \r\nKedua perintah diatas mempunyai fungsi yang berbeda beda, perintah ```$this->query``` digunakan untuk mengeksekusi query dengan operasi ```INSERT```, ```UPDATE``` dan ```DELETE``` sedangkan perintah ```$this->fetch``` hanya digunakan untuk query dengan operasi SELECT. Kedua perintah tersebut memiliki parameter yang sama untuk digunakan didalam fungsinya yaitu query SQL yang diwakili oleh variabel $query. Hasil eksekusi perintah ```$this->query``` dalam bentuk nilai bolean yaitu 0 untuk gagal dan 1 untuk berhasil sedangkan untuk perintah ```$this->fetch``` nilai kembaliannya dalam bentuk array\r\n##### Hasil query\r\nHasil query yang dieksekusi pada perintah ```$this->fetch``` akan berupa array, untuk mengakses data hasil pemrosesan perintah tersebut adalah dengan cara mengakses indeksnya terlebih dahulu, aturan dasar pada variabel array\r\n```php\r\n$sql = \"YOUR SELECT QUERY\";                  \r\n$result = $this->fetch($sql);        \r\nif ($result){\r\n\tforeach ($result as $key => $value) {   \r\n\t   $value['YOUR-INDEX'];\r\n\t}                      \r\n}\r\n```\r\n##### Query Helper\r\nClass database juga sudah dilengkapi dengan fungsi bantuan untuk melakukan eksekusi query ke database, salah satu contoh fungsi yang bisa dilakukan adalah sebagai berikut \r\n```php\r\n$sql = array(\r\n\t        'table'=>\"user\",\r\n\t\t'field'=>\"COUNT(1) AS total\",\r\n\t\t'condition' => \"n_status = 1\",\r\n\t\t'limit' => 10                \r\n\t\t);\r\n$result = $this->lazyQuery($sql,$debug);\r\n```\r\nFungsi diatas (lazyQuery) adalah fungsi bantuan untuk menjalankan query operasi ```SELECT``` ke database dengan parameter data dengan tipe data array, data array pada variabel ```$sql``` memiliki index yang merujuk ke tabel database yang akan diakses antara lain index 'table' digunakan untuk definisi nama tabel, 'field' untuk definisi field apa saja yang mau diambil, index 'condition' berupa kondisi yang akan digunakan dalam query dan index 'limit' berfungsi untuk membatasi jumlah data yang dihasilkan. Sedangkan fungsi bantuan untuk operasi ```UPDATE``` dan ```INSERT``` bisa menggunakan fungsi berikut ini\r\n```php\r\n$this->save(\"update\", \"$table\", $data, $id, $debug);\r\n```\r\nFungsi tersebut memiliki 5 parameter yang harus didefinisikan terlebih dahulu, berikut penjelasan kelima parameter tersebut\r\n* \"update\", adalah parameter pertama dari fungsi ini yang bertujuan untuk mendefinisikan metode yang akan dieksekusi. Nilai dari parameter ini yaitu \"update\" ataupun \"insert\"\r\n* ```$table```, merupakan definisi variabel nama tabel pada database yang akan dituju\r\n* ```$data```, adalah variabel array yang berisi hasil post data dari form, bentuk datanya dalam format array 1 dimensi\r\n* ```$id```, apabila menggunakan metode \"update\" maka variabel ini harus terdefinisi namun jika menggunakan metode “insert” maka variabel ini bisa dikosongkan\r\n* ```$debug```, berfungsi untuk melakukan debuging query, nilainya berupa boolean dengan ketentuan nilai 1 untuk mengaktifkan mode debug sedangkan nilai 0 untuk menonaktifkan mode debug\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? [contact support](https://github.com/TrinataBhayanaka) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}